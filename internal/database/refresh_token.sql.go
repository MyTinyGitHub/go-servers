// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_token.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_token(token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES(
  $1,
  NOW(),
  NOW(),
  $2,
  NOW() + (60 * INTERVAL '1 DAY'),
  NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT
  token, created_at, updated_at, user_id, expires_at, revoked_at
FROM
  refresh_token 
WHERE
  token = $1 
  AND expires_at > NOW()
  AND revoked_at IS NULL
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT
  id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM
  users 
WHERE
  id = (select user_id from refresh_token where token = $1)
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const revokeTokenByToken = `-- name: RevokeTokenByToken :exec
UPDATE
  refresh_token 
SET
  revoked_at = NOW(),
  updated_at = NOW() 
WHERE
  token = $1
`

func (q *Queries) RevokeTokenByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeTokenByToken, token)
	return err
}

const updateExpiresAtForRevoked = `-- name: UpdateExpiresAtForRevoked :exec
UPDATE 
  refresh_token 
SET
  expires_at = NOW() + (60 * INTERVAL '1 DAY'),
  updated_at = NOW() 
WHERE
  token = $1
`

func (q *Queries) UpdateExpiresAtForRevoked(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updateExpiresAtForRevoked, token)
	return err
}
